--- a/yc-object-storage-service/api/handlers.go
+++ b/yc-object-storage-service/api/handlers.go
@@ -1,6 +1,7 @@
 package api
 
 import (
+	"sort"
 	"net/http"
 	"strconv"
 	"time"
@@ -24,6 +25,18 @@
 	c.JSON(http.StatusOK, gin.H{"folders": output.Folders, "files": output.Files})
 }
 
+func (h *Handler) ListAllFoldersHandler(c *gin.Context) {
+	folders, err := h.S3Client.ListAllFolders()
+	if err != nil {
+		c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to list all folders", "details": err.Error()})
+		return
+	}
+	// Sort for consistent ordering in the UI
+	sort.Strings(folders)
+
+	c.JSON(http.StatusOK, gin.H{"folders": folders})
+}
+
 func (h *Handler) GeneratePresignedURLHandler(c *gin.Context) {
 	objectKey := c.Query("objectKey")
 	if objectKey == "" {
--- a/yc-object-storage-service/main.go
+++ b/yc-object-storage-service/main.go
@@ -23,6 +23,7 @@
 	{
 		v1.GET("/list", handler.ListObjectsHandler)
 		v1.GET("/generate-url", handler.GeneratePresignedURLHandler)
+		v1.GET("/list-all-folders", handler.ListAllFoldersHandler)
 	}
 
 	// Health check
--- a/yc-object-storage-service/s3/client.go
+++ b/yc-object-storage-service/s3/client.go
@@ -2,6 +2,7 @@
 
 import (
 	"log"
+	"strings"
 	"time"
 
 	"github.com/marketconnect/yc-object-storage-service/config"
@@ -70,6 +71,41 @@
 	return &ListObjectsOutput{Folders: folders, Files: files}, nil
 }
 
+func (c *Client) ListAllFolders() ([]string, error) {
+	folderSet := make(map[string]struct{})
+	var lastKey *string
+
+	for {
+		input := &s3.ListObjectsV2Input{
+			Bucket:            aws.String(c.BucketName),
+			ContinuationToken: lastKey,
+		}
+
+		result, err := c.S3Svc.ListObjectsV2(input)
+		if err != nil {
+			return nil, err
+		}
+
+		for _, item := range result.Contents {
+			if strings.Contains(*item.Key, "/") {
+				pathParts := strings.Split(*item.Key, "/")
+				// Iterate through path parts to add all parent directories
+				for i := 1; i < len(pathParts); i++ {
+					folderSet[strings.Join(pathParts[:i], "/")+"/"] = struct{}{}
+				}
+			}
+		}
+
+		if !*result.IsTruncated {
+			break
+		}
+		lastKey = result.NextContinuationToken
+	}
+
+	folders := make([]string, 0, len(folderSet))
+	for folder := range folderSet {
+		folders = append(folders, folder)
+	}
+
+	return folders, nil
+}
+
 func (c *Client) GeneratePresignedURL(objectKey string, lifetime time.Duration) (string, error) {
 	req, _ := c.S3Svc.GetObjectRequest(&s3.GetObjectInput{
 		Bucket: aws.String(c.BucketName),