--- a/yc-object-storage-service/api/handlers.go
+++ b/yc-object-storage-service/api/handlers.go
@@ -1,7 +1,10 @@
 package api
 
 import (
+	"archive/zip"
+	"io"
 	"net/http"
+	"log"
 	"sort"
 	"strconv"
 	"time"
@@ -9,6 +12,11 @@
 	"github.com/marketconnect/yc-object-storage-service/s3"
 
 	"github.com/gin-gonic/gin"
+)
+
+type ArchiveRequest struct {
+	Keys    []string `json:"keys"`
+	Folders []string `json:"folders"`
 )
 
 type Handler struct {
@@ -62,3 +70,62 @@
 
 	c.JSON(http.StatusOK, gin.H{"url": url})
 }
+
+func (h *Handler) CreateArchiveHandler(c *gin.Context) {
+	var req ArchiveRequest
+	if err := c.ShouldBindJSON(&req); err != nil {
+		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid request body", "details": err.Error()})
+		return
+	}
+
+	c.Header("Content-Type", "application/zip")
+	c.Header("Content-Disposition", "attachment; filename=archive.zip")
+
+	zipWriter := zip.NewWriter(c.Writer)
+	defer zipWriter.Close()
+
+	allKeys := make(map[string]struct{})
+
+	// Add individual files
+	for _, key := range req.Keys {
+		allKeys[key] = struct{}{}
+	}
+
+	// Add files from folders
+	for _, folderPrefix := range req.Folders {
+		files, err := h.S3Client.ListAllObjects(folderPrefix)
+		if err != nil {
+			// Log the error but try to continue
+			log.Printf("Error listing objects for prefix %s: %v", folderPrefix, err)
+			continue
+		}
+		for _, file := range files {
+			allKeys[file] = struct{}{}
+		}
+	}
+
+	// Process all unique keys
+	for key := range allKeys {
+		obj, err := h.S3Client.GetObject(key)
+		if err != nil {
+			log.Printf("Error getting object %s: %v", key, err)
+			continue
+		}
+
+		f, err := zipWriter.Create(key)
+		if err != nil {
+			obj.Body.Close()
+			log.Printf("Error creating zip entry for %s: %v", key, err)
+			continue
+		}
+
+		if _, err := io.Copy(f, obj.Body); err != nil {
+			obj.Body.Close()
+			log.Printf("Error copying object body for %s: %v", key, err)
+			continue
+		}
+		obj.Body.Close()
+	}
+}
--- a/yc-object-storage-service/main.go
+++ b/yc-object-storage-service/main.go
@@ -24,6 +24,7 @@
 	{
 		v1.GET("/list", handler.ListObjectsHandler)
 		v1.GET("/generate-url", handler.GeneratePresignedURLHandler)
+		v1.POST("/archive", handler.CreateArchiveHandler)
 		v1.GET("/list-all-folders", handler.ListAllFoldersHandler)
 	}
 
--- a/yc-object-storage-service/s3/client.go
+++ b/yc-object-storage-service/s3/client.go
@@ -71,6 +71,44 @@
 	return &ListObjectsOutput{Folders: folders, Files: files}, nil
 }
 
+func (c *Client) ListAllObjects(prefix string) ([]string, error) {
+	var files []string
+	var continuationToken *string
+
+	for {
+		input := &s3.ListObjectsV2Input{
+			Bucket:            aws.String(c.BucketName),
+			Prefix:            aws.String(prefix),
+			ContinuationToken: continuationToken,
+		}
+
+		result, err := c.S3Svc.ListObjectsV2(input)
+		if err != nil {
+			return nil, err
+		}
+
+		for _, item := range result.Contents {
+			// Ignore the folder key itself if it's empty
+			if *item.Size > 0 {
+				files = append(files, *item.Key)
+			}
+		}
+
+		if !*result.IsTruncated {
+			break
+		}
+		continuationToken = result.NextContinuationToken
+	}
+
+	return files, nil
+}
+
+func (c *Client) GetObject(objectKey string) (*s3.GetObjectOutput, error) {
+	return c.S3Svc.GetObject(&s3.GetObjectInput{
+		Bucket: aws.String(c.BucketName),
+		Key:    aws.String(objectKey),
+	})
+}
+
 func (c *Client) ListAllFolders() ([]string, error) {
 	folderSet := make(map[string]struct{})
 	var lastKey *string